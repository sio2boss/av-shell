#!/bin/bash

# Get the absolute path of the executable
function realpath {
    local r=$1; local t=$(readlink $r)
    while [ $t ]; do
        r=$(cd $(dirname $r) && cd $(dirname $t) && pwd -P)/$(basename $t)
        t=$(readlink $r)
    done
    echo $r
}
AV_INSTALLED_PATH=$(dirname $(realpath "$0"))

# Figure out where the .av directory is starting with pwd
upsearch () {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  for (( n=${#slashes}; n>0; --n ))
  do
    test -e "$directory/$1" && export AV_ROOT="$directory/$1" && return
    directory="$directory/.."
  done
}

# Update function
update() {
	cp -v $AV_INSTALLED_PATH/config/default_imports $AV_ROOT/config/
	cp -v $AV_INSTALLED_PATH/config/passthrough_template $AV_ROOT/config/
	cp -v $AV_INSTALLED_PATH/config/template $AV_ROOT/config/
	cp -v $AV_INSTALLED_PATH/config/welcome $AV_ROOT/config/
	cp -v $AV_INSTALLED_PATH/config/version $AV_ROOT/config/
	cp -v $AV_INSTALLED_PATH/config/color $AV_ROOT/config/
	cp -v $AV_INSTALLED_PATH/config/findjar $AV_ROOT/config/
	rm -f $AV_ROOT/bin/inquirer_menu
	rm -f $AV_ROOT/bin/edit
	rm -f $AV_ROOT/bin/getpv
	rm -f $AV_ROOT/bin/setpv
	rm -f $AV_ROOT/bin/help
	rm -f $AV_ROOT/bin/new
	rm -f $AV_ROOT/bin/plugin
	rm -f $AV_ROOT/bin/rename
	rm -f $AV_ROOT/bin/rm
	rm -f $AV_ROOT/bin/setprompt
	mkdir -p  $AV_ROOT/config/vars
}

# Handle update command
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

# --------------------------------------------------------------------

# See if there is an .av directory
upsearch ".av"


# Built-in commands
if [[ "$1" == "help" || "$1" == "--help" || "$1" == "-h" ]]; then
	export AV_CONFIG_DIR=$AV_INSTALLED_PATH/config
	cd $AV_INSTALLED_PATH/config && ./welcome
	echo
	echo "Global commands: "
	echo "  help    - this helpful display"
	echo "  install - installs the latest av-shell and plugins"
	echo 
	echo "Commands that work on the current directory: "
	echo "  init    - creates a new domain specific shell in your current path"
	echo "  status  - displays 'av' if a domain specific shell is in your current path"
	echo "  update  - checks your domain specific shell's version and imposes the changes necessary"
	echo "  upgrade - same as update"
	echo
	exit
fi

if [[ "$1" == "status" ]]; then
	if [ -z $AV_ROOT ]; then
		echo ""
	else
		echo "av"
	fi
	exit
fi


if [[ "$1" == "install" ]]; then
	npm install -g av-shell av-docker
	exit
fi

if [[ "$1" == "init" && -z "$AV_ROOT" ]]; then
	echo "This utility creates a new domain specific shell in your current path"
	echo

    if [[ -e .av ]]; then
    	echo "It appears 'av' is already installed"
    	exit
    fi

	echo "your prompt should be named?:"
	read prompt

	echo
	echo "copying files..."
	mkdir .av
	mkdir .av/bin
	cp -r $AV_INSTALLED_PATH/config .av/
	echo "$prompt" > .av/config/prompt

	echo
	echo "done"

	exit
fi

if [ -z "$AV_ROOT" ]; then
	echo "Unable to find av environment, have you run 'av init'?"
	exit
fi


# Find local version
LOCAL_VER="0.0.0"
if [ -e $AV_ROOT/config/version ]; then
	LOCAL_VER=`cat $AV_ROOT/config/version`
fi
INSTALLED_VER=`cat $AV_INSTALLED_PATH/config/version`

if [[ "$1" == "update" || "$1" == "upgrade" ]]; then
	update ""
	exit
fi


vercomp $INSTALLED_VER $LOCAL_VER
case $? in
    1) #op='>'

		echo -n "We need to do an update of your project shell, may I? [n/Y]: "
		read line
		if [[ "$line" == "Y" || "$line" == "y" || -z "$line" ]]; then
			update ""
			echo ""
			echo "Updated local scripts to ${txtpur}v$INSTALLED_VER${txtrst}"
			echo ""
		else
			echo ""
			echo "Roger that, not touching a thing."
			echo ""
		fi
	;;

    2) #op='<'

		echo "Your project is running a newer version of av than you have installed..."
		echo
		echo "${txtbld}Please run 'npm upgrade av-shell'${txtrst}"
		echo
		exit

	;;

esac


# --------------------------------------------------------------------

# Change dir to script root
cd $AV_ROOT/.. > /dev/null

# If there are arguments, just run them rather than opening a shell
if [ $# -eq 0 ]; then

	# Open shell
	AV_INSTALLED_PATH=$AV_INSTALLED_PATH AV_ROOT=$AV_ROOT bash --rcfile $AV_INSTALLED_PATH/config/rc

else

	# Run command in shell
	AV_INSTALLED_PATH=$AV_INSTALLED_PATH AV_NON_INTERACTIVE=true AV_ROOT=$AV_ROOT PATH=$AV_ROOT/bin:$PATH bash --rcfile $AV_INSTALLED_PATH/config/rc -i -c "$*"
  exit $?

fi

# Go back
cd - > /dev/null
