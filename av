#!/bin/zsh

txtred="\033[0;31m"       # red
txtgrn="\033[0;32m"       # green
bldgrn="\033[1;32m"       # bold green
txtrst="\033[0m"          # Text reset

# Detect CI environment
if [[ -n "${CI}" || -n "${GITHUB_ACTIONS}" ]]; then
    export AV_CI_MODE="true"
fi

# Only set GUM settings in interactive mode
if [[ -z "${AV_CI_MODE}" ]]; then
    export GUM_FORMAT_THEME="dark"
    export GUM_INPUT_CURSOR_FOREGROUND="#00FF00"
    export GUM_INPUT_PROMPT_FOREGROUND="#00FF00"
    export GUM_CHOOSE_CURSOR_FOREGROUND="#00FF00"
    export GUM_CHOOSE_HEADER_FOREGROUND="#00FF00"
    export GUM_SPIN_SPINNER_FOREGROUND="#00FF00"
    export GUM_CONFIRM_SELECTED_BACKGROUND="#00FF00"
    export GUM_CONFIRM_SELECTED_FOREGROUND="#000000"
fi

# Get the absolute path of the executable
# function realpath {
#     local r=$1; local t=$(readlink $r)
#     while [ $t ]; do
#         r=$(cd $(dirname $r) && cd $(dirname $t) && pwd -P)/$(basename $t)
#         t=$(readlink $r)
#     done
#     echo $r
# }
AV_INSTALLED_PATH=~/.av

# Figure out where the .av directory is starting with pwd
upsearch () {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  topdir="`cd ~/;pwd`"
  for (( n=${#slashes}; n>0; --n ))
  do
	if [[ $directory == $topdir ]]; then
		return
	fi
    test -e "$directory/$1" && export AV_ROOT="$directory/$1" && return
	directory="`cd "$directory/..";pwd`"
  done
}

# --------------------------------------------------------------------

# Built-in commands
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
	export AV_CONFIG_DIR=$AV_INSTALLED_PATH/config
	cd $AV_INSTALLED_PATH/config && ./welcome
	echo
	echo "Flags: "
	echo "  --help      - this helpful display"
	echo 
	echo "Commands that work on the current directory: "
	echo "  init        - creates a new domain specific shell in your current path"
	echo "  status      - displays 'av' if a domain specific shell is in your current path"
	echo "  get         - install plugin from repository"
	echo "  invigorate  - checks your domain specific shell's version and imposes the changes necessary"
	echo "  upgrade     - pull updates for av-shell and plugins, system wide"
	echo "  update      - same as upgrade"
	echo "  activate    - produce content that can be sourced to activate like python virtualenvs"
	echo "  deactivate  - undo the activate sub-command"
	echo
	exit
fi


if [[ "$1" == "init" && -z "$AV_ROOT" ]]; then

    if [[ -e .av ]]; then
    	echo "It appears 'av' is already installed"
    	exit 0
    fi

	gum format -t markdown -- "# AV-SHELL" \
		"This utility creates a new domain specific shell in your current path."

	echo
	prompt=$(gum input --prompt="  Your prompt should be named?: " --placeholder="cool-project name without spaces")
	if [[ -z "$prompt" ]]; then
		exit 1
	fi
	echo "  Prompt will be: $prompt"
	echo

	gum spin --spinner line --title "Copying..." -- sh -c '
		mkdir -p .av/config && touch .av/config/.gitignore
		echo "vars/container" >> .av/config/.gitignore
		echo "vars/cluster" >> .av/config/.gitignore
		echo "vars/branch" >> .av/config/.gitignore
		echo "vars/cluster_type" >> .av/config/.gitignore
		echo "vars/profile" >> .av/config/.gitignore
		echo "vars/lasthash" >> .av/config/.gitignore
		sleep 1
	'
	echo "$prompt" > .av/config/prompt

	echo -e "  ${bldgrn}Done${txtrst}"
	echo

	exit
fi

if [[ "$1" == "get" && -z "$AV_ROOT" ]]; then

	if [[ $# -ne 2 ]]; then
		echo "Usage: av get <repository>"
		exit 1
	fi

  reponame="$(basename "${2%.*}")"
  if [[ -e ~/.av/plugins/${reponame} ]]; then
		echo -e "${txtgrn}[AV-SHELL]${txtrst} Plugin already installed, pulling latest..."
		cd ~/.av/plugins/${reponame} && git pull
	else
		cd ~/.av/plugins && git clone $2
	fi

	exit
fi

# See if there is an .av directory
unset AV_ROOT
upsearch ".av"

if [[ "$1" == "status" ]]; then
	if [[ ! -z $AV_ROOT ]]; then
		echo -n "$AV_ROOT"
	fi
	exit
fi

if [[ -z "$AV_ROOT" && $# -eq 0 ]]; then
	echo "Unable to find av environment, have you run 'av init'?"
	exit
fi

# --------------------------------------------------------------------

# Mount like pyenv mode
if [[ "$1" == "activate" ]]; then

	echo -e "export AV_ROOT=$AV_ROOT"
	echo -e "export AV_INTERACTIVE_MODE=\"mounted\""
	echo -e "export AV_INSTALLED_PATH=$AV_INSTALLED_PATH"
	echo -e "source $AV_INSTALLED_PATH/config/.zshrc"
	echo -e "export AV_OLD_SYSTEM_PATH=\"$PATH\""
	echo -e 'export PATH=$AV_BIN_DIR:${av_path}:$PATH'
	echo -e "if [ -n \"${BASH:-}\" -o -n \"${ZSH_VERSION:-}\" ] ; then"
	echo -e "	hash -r 2> /dev/null"
	echo -e "fi"
	echo -e "refresh"

	exit
fi

if [[ "$1" == "deactivate" ]]; then

    echo -e "unset AV_ROOT"
    echo -e "unset AV_INTERACTIVE_MODE"
    echo -e "unset AV_INSTALLED_PATH"
	echo -e "unset AV_PROJ_TOP"
	echo -e "unset ZDOTDIR"
    echo -e "if [ ! -z \"$AV_OLD_SYSTEM_PATH\" ]; then"
	echo -e "   export PATH=\"$AV_OLD_SYSTEM_PATH\""
	echo -e "   unset AV_OLD_SYSTEM_PATH"
	echo -e "fi"
    echo -e "RPROMPT=$AV_OLD_RPROMPT"
	echo -e "if [ -n \"${BASH:-}\" -o -n \"${ZSH_VERSION:-}\" ] ; then"
	echo -e "	hash -r 2> /dev/null"
	echo -e "fi"

	exit
fi

# Don't allow av to be called recursively
if [[ "$AV_INTERACTIVE_MODE" == "interactive" ]]; then
	echo
	echo "You are already in the av-shell!"
	echo
	exit
fi

# Change dir to script root
cd $AV_ROOT/.. > /dev/null


# If there are arguments, just run them rather than opening a shell
if [[ $# -eq 0 ]]; then

	FORCED_COMMAND=""

	# Skip update check in CI mode
	if [[ -z "${AV_CI_MODE}" ]]; then
		CURRENT_DATE=`date +%s`
		if [[ ! -e $AV_INSTALLED_PATH/config/update_checked ]]; then
			echo -n "${CURRENT_DATE}" > $AV_INSTALLED_PATH/config/update_checked
		else
			LAST_CHECKED=`cat $AV_INSTALLED_PATH/config/update_checked`
			if [[ `expr ${CURRENT_DATE} - ${LAST_CHECKED}` -gt 1728000 ]]; then
				echo -n "${CURRENT_DATE}" > $AV_INSTALLED_PATH/config/update_checked
				gum format -t markdown -- "# AV-SHELL"
				gum confirm "  Would you like to check for updates?"
				if [[ $? -eq 0 ]]; then
					AV_INSTALLED_PATH=$AV_INSTALLED_PATH \
					AV_INTERACTIVE_MODE="single" \
					AV_ROOT=$AV_ROOT \
					PATH=$AV_ROOT/bin:$PATH \
					ZDOTDIR=$AV_INSTALLED_PATH/config \
					zsh -i -c upgrade
				fi
			fi
		fi
	fi

	# Open shell
	AV_INSTALLED_PATH=$AV_INSTALLED_PATH \
	AV_INTERACTIVE_MODE="interactive" \
	AV_ROOT=$AV_ROOT \
	ZDOTDIR=$AV_INSTALLED_PATH/config \
	zsh -i ${FORCED_COMMAND}

elif [[ "$1" == "update" || "$1" == "upgrade" ]]; then

	shift
	AV_INSTALLED_PATH=$AV_INSTALLED_PATH \
	AV_INTERACTIVE_MODE="single" \
	AV_ROOT=$AV_ROOT \
	PATH=$AV_ROOT/bin:$PATH \
	ZDOTDIR=$AV_INSTALLED_PATH/config \
	zsh -i -c "upgrade $@"

elif [[ ! -z "${AV_CI_MODE}" ]]; then

	echo "CI MODE: $@"

	# Run command in shell
	AV_INSTALLED_PATH=$AV_INSTALLED_PATH \
	AV_INTERACTIVE_MODE="single" \
	AV_ROOT=$AV_ROOT \
	PATH=$AV_ROOT/bin:$PATH \
	ZDOTDIR=$AV_INSTALLED_PATH/config \
	zsh -fd -c 'source $AV_INSTALLED_PATH/config/.zshrc && "$@"' - "$@"

else

	AV_INSTALLED_PATH=$AV_INSTALLED_PATH \
	AV_INTERACTIVE_MODE="single" \
	AV_ROOT=$AV_ROOT \
	PATH=$AV_ROOT/bin:$PATH \
	ZDOTDIR=$AV_INSTALLED_PATH/config \
	zsh -i -c "$@"

fi

exit $?