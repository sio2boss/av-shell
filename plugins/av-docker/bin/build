#! /bin/bash

# Import color
source $AV_CONFIG_DIR/default_imports

# Check for a help flag
avCheckHelpFlagsPassThrough "$1" "docker" "Build an image from a Dockerfile" "docker build --help"

# Import system path
avAppendSystemPath

#### Put system commands here

domain=$(cat $AV_PROJECT_CONFIG_DIR/prompt | sed "s/\ /\_/g")
if [ -z $domain ]; then
	echo -e "${txtred}Unable to understand prompt text as docker domain${txtrst}"
	exit 1
fi
container=$(getpv container)
if [ -z $container ]; then
	echo -e "${txtred}Unable to determine which container you are working on, use setpv container${txtrst}"
	exit 1
fi

cpath=$(container_path)
if [ ! -e "$cpath" ]; then
	echo -e "${txtred}Unable to determine container_path, make sure you have set 'containerdir' and 'container' vars${txtrst}"
	exit 1
fi

cachedate=$(date +%s)
build_args="--build-arg CACHE_DATE=${cachedate}"
artifacts_url=$(getpv artifacts-url)
if [[ ! -z "${artifacts_url}" ]]; then
	build_args+=" --build-arg PIP_INDEX_URL=${artifacts_url}"
fi
artifacts_auth_token=$(getpv artifacts-token)
if [[ ! -z "${artifacts_auth_token}" ]]; then
	export CODEARTIFACT_AUTH_TOKEN=${artifacts_auth_token}
	build_args+=" --build-arg CODEARTIFACT_URL=${artifacts_url} --secret id=codeartifact-auth-token,env=CODEARTIFACT_AUTH_TOKEN --build-arg NPM_TOKEN=$NPM_TOKEN"
fi


avCheckVerbose "docker build $@ ${build_args} -t $domain/$container ."
cd $(container_path) && docker build $@ ${build_args} -t $domain/$container .

exit $?

#### End commands
