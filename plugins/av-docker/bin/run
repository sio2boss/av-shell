#! /bin/bash

# Import color
source $AV_CONFIG_DIR/default_imports

# Check for a help flag
avCheckHelpFlagsPassThrough "$1" "docker" "Run a command in a new container" "docker run --help"

#### Put system commands here

# Get container provider, default to docker if not set
provider=$(container_provider)
if [ -z "$provider" ]; then
    provider="docker"
fi

domain=$(cat $AV_PROJECT_CONFIG_DIR/prompt | sed "s/\ /\_/g")
if [ -z $domain ]; then
	echo -e "${txtred}Unable to understand prompt text as docker domain${txtrst}"
	exit 1
fi

container=$(getpv container)
if [ -z $domain ]; then
	echo -e "${txtred}Unable to understand prompt text as docker domain${txtrst}"
	exit 1
fi

container_path=$(container_path)
if [ -z $domain ]; then
	echo -e "${txtred}Unable to understand prompt text as docker domain${txtrst}"
	exit 1
fi

if [ ! -e "$container_path/Runfile" ]; then
	echo -e "${txtred}Unable to find Runfile in $container_path${txtrst}"
    exit 1
fi

# Handle interactive override
options="-it --rm"
if [[ -e "$container_path/Runfile" ]]; then
	options=$(cat $container_path/Runfile)
fi
if [[ "$1" == "interactive" ]]; then
	shift
	options=$(echo "${options}" | sed -e 's/\-d[[:space:]]*/\-it\ /1')
fi

# Force resolution of pwd to allow relative paths with Docker
options=$(cd ${container_path} && bash -c "echo ${options}")

# Import system path
avAppendSystemPath

# Run
avCheckVerbose "$provider run ${options} ${domain}/${container} $@"
cd ${container_path} && $provider run ${options} ${domain}/${container} "$@"
STATUS=$?

# Capture the hash
holdhash=$(getpv holdhash)
if [[ "${holdhash}" == "true" ]]; then
	setpv "lasthash" "`$provider ps -l -q`"
fi

exit $STATUS
#### End commands
