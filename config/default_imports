#! /bin/bash

# Import color
source $AV_CONFIG_DIR/color

# Check for a help flag
# $1: args as in $1 from command line
# $2: script category, i.e. builtin plugin_XYZ 
# $3: single help line
# $4: full help
function avCheckHelpFlags
{
		if [[ $# -ne 4 ]]; then
		echo -e "Error in calling avCheckHelpFlags!"
		exit
	fi

	if [[ "$1" == "-h" || "$1" == "--help" ]]; then

		if [[ $AV_SINGLE_LINE_HELP == true ]]; then
			echo -e "$3"
		else
			echo -e "$4"
		fi

		exit
	fi
}

# Restore system path
function avRestoreSystemPath
{
	export PATH=$AV_OLD_SYSTEM_PATH
}
function avRestorePreloadedPath
{
	export PATH=$AV_PRELOADED_PATH
}

# Restore system path
function avAppendSystemPath
{
	export PATH=$PATH:$AV_OLD_SYSTEM_PATH
}

# Restore system path
function avPrependSystemPath
{
	export PATH=$AV_OLD_SYSTEM_PATH:$PATH
}

# Figure out default editor and run it with provided filename (full path)
function avLaunchEditor
{
	if [ -z "$EDITOR" ]; then

		echo "set your EDITOR to something you like:"
		echo "  | "
		echo "  | export EDITOR=sublime"
		echo "  | "
		echo
		sleep 2
		echo

		vi $1

	else

		$EDITOR $1

	fi
}

# Same as avCheckHelpFlags but instead of outputing full help, run command
function avCheckHelpFlagsPassThrough
{ 
	if [[ $# -ne 4 ]]; then
		echo -e "Error in calling avCheckHelpFlags!"
		exit
	fi

	if [[ "$1" == "-h" || "$1" == "--help" ]]; then

		if [[ $AV_SINGLE_LINE_HELP == true ]]; then
			echo -e "$3"
		else
			avRestoreSystemPath
			$($4)
		fi

		exit
	fi
}

# Verbose
function avCheckVerbose
{
	if [[ "$(getpv verbose)" == "true" ]]; then

		gum format -t markdown -- "# AV-SHELL" \
			"Pausing for confirmation \`verbose\` was set to \"on\"." \
			"This is the command about to be run:"
		echo "$@" | gum format -t code
		
		gum confirm "Okay to continue?"
		if [[ $? -ne 0 ]]; then
			echo
			exit
		fi
		echo -e "  --------------------------------------------------------------"
		echo
	fi
}

# Activate python virtual env
function activate_venv() {
    if [[ -e $AV_PROJ_TOP/venv/bin/activate ]]; then
        source $AV_PROJ_TOP/venv/bin/activate
        export PATH=$AV_BIN_DIR:$VIRTUAL_ENV/bin:${av_path}:/usr/local/bin:/usr/bin
    fi
    if [[ -e $AV_PROJ_TOP/venv/conda-meta ]]; then
        # >>> conda initialize >>>
        # !! Contents within this block are managed by 'conda init' !!
        __conda_setup="$('/opt/homebrew/Caskroom/miniconda/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        else
            if [ -f "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
                . "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh"
            else
                export PATH="/opt/homebrew/Caskroom/miniconda/base/bin:$PATH"
            fi
        fi
        unset __conda_setup
        # <<< conda initialize <<<
        export VIRTUAL_ENV="venv(conda)"
        conda activate $AV_PROJ_TOP/venv
    fi
}

functionformat_args() {
    local args="$1"
    if [ ${#args} -gt 1 ]; then
        echo " $args "
    else
        echo " "
    fi
}